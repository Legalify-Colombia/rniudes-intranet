import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useSupabaseData } from "@/hooks/useSupabaseData";
import { useToast } from "@/hooks/use-toast";
import { ProgressIndicatorCard } from "./ProgressIndicatorCard";
import { EvidenceUploader } from "./EvidenceUploader";
import { FileText, Save, Send, AlertTriangle, CheckCircle, Clock, Edit3 } from "lucide-react";

interface EditableReportFormProps {
Â  reportId: string;
Â  workPlanId: string;
Â  onSave: () => void;
Â  reportStatus?: string;
Â  isReadOnly?: boolean;
}

export function EditableReportForm({Â 
Â  reportId,Â 
Â  workPlanId,Â 
Â  onSave,
Â  reportStatus = 'draft',
Â  isReadOnly = false
}: EditableReportFormProps) {
Â  const {
Â  Â  fetchWorkPlanAssignments,
Â  Â  fetchProductProgressReports,
Â  Â  upsertProductProgressReport,
Â  Â  updateManagerReport
Â  } = useSupabaseData();
Â  const { toast } = useToast();

Â  const [assignments, setAssignments] = useState<any[]>([]);
Â  const [progressReports, setProgressReports] = useState<any[]>([]);
Â  const [localChanges, setLocalChanges] = useState<any>({});
Â  const [loading, setLoading] = useState(true);
Â  const [saving, setSaving] = useState(false);
Â  const [submitting, setSubmitting] = useState(false);
Â  const [overallProgress, setOverallProgress] = useState(0);

Â  useEffect(() => {
Â  Â  // ðŸ’¡ CORRECCIÃ“N: Si workPlanId no existe, desactivamos la carga inmediatamente.
Â  Â  if (workPlanId) {
Â  Â  Â  loadData();
Â  Â  } else {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, [reportId, workPlanId]);

Â  useEffect(() => {
Â  Â  calculateOverallProgress();
Â  }, [progressReports, localChanges]);

Â  const loadData = async () => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  console.log('Cargando datos para reportId:', reportId, 'workPlanId (custom_plan_id):', workPlanId);
Â  Â  Â  const [assignmentsResult, progressResult] = await Promise.all([
Â  Â  Â  Â  fetchWorkPlanAssignments(workPlanId), // workPlanId es en realidad custom_plan_id
Â  Â  Â  Â  fetchProductProgressReports(reportId)
Â  Â  Â  ]);

Â  Â  Â  console.log('Datos cargados:', { assignmentsResult, progressResult });
Â  Â  Â  setAssignments(assignmentsResult.data || []);
Â  Â  Â  setProgressReports(progressResult.data || []);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error loading data:', error);
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Error",
Â  Â  Â  Â  description: "No se pudieron cargar los datos del informe",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  const calculateOverallProgress = () => {
Â  Â  const allReports = [...progressReports];
Â  Â Â 
Â  Â  // Aplicar cambios locales
Â  Â  Object.keys(localChanges).forEach(productId => {
Â  Â  Â  const existingIndex = allReports.findIndex(r => r.product_id === productId);
Â  Â  Â  if (existingIndex >= 0) {
Â  Â  Â  Â  allReports[existingIndex] = { ...allReports[existingIndex], ...localChanges[productId] };
Â  Â  Â  } else if (localChanges[productId].progress_percentage > 0) {
Â  Â  Â  Â  allReports.push({ product_id: productId, ...localChanges[productId] });
Â  Â  Â  }
Â  Â  });

Â  Â  if (allReports.length === 0) {
Â  Â  Â  setOverallProgress(0);
Â  Â  Â  return;
Â  Â  }

Â  Â  const totalProgress = allReports.reduce(
Â  Â  Â  (sum, report) => sum + (report.progress_percentage || 0),Â 
Â  Â  Â  0
Â  Â  );
Â  Â  const average = totalProgress / allReports.length;
Â  Â  setOverallProgress(Math.round(average));
Â  };

Â  const getProgressReport = (productId: string, assignmentId: string) => {
Â  Â  const localChange = localChanges[productId];
Â  Â  const dbReport = progressReports.find(pr => pr.product_id === productId);
Â  Â Â 
Â  Â  return {
Â  Â  Â  progress_percentage: 0,
Â  Â  Â  observations: '',
Â  Â  Â  evidence_files: [],
Â  Â  Â  evidence_file_names: [],
Â  Â  Â  ...dbReport,
Â  Â  Â  ...localChange
Â  Â  };
Â  };

Â  const updateLocalChanges = (productId: string, assignmentId: string, updates: any) => {
Â  Â  if (isReadOnly) return;
Â  Â Â 
Â  Â  console.log('Actualizando cambios locales:', { productId, updates });
Â  Â  setLocalChanges(prev => ({
Â  Â  Â  ...prev,
Â  Â  Â  [productId]: {
Â  Â  Â  Â  ...prev[productId],
Â  Â  Â  Â  ...updates
Â  Â  Â  }
Â  Â  }));
Â  };

Â  const saveDraft = async () => {
Â  Â  if (isReadOnly) return;
Â  Â Â 
Â  Â  setSaving(true);
Â  Â  try {
Â  Â  Â  console.log('Guardando borrador con cambios locales:', localChanges);
Â  Â  Â Â 
Â  Â  Â  const saveResults = [];
Â  Â  Â  const saveErrors = [];
Â  Â  Â Â 
Â  Â  Â  for (const productId of Object.keys(localChanges)) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const assignment = assignments.find(a => a.product.id === productId);
Â  Â  Â  Â  Â  if (!assignment) {
Â  Â  Â  Â  Â  Â  console.warn('No se encontrÃ³ assignment para producto:', productId);
Â  Â  Â  Â  Â  Â  continue;
Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  const reportData = {
Â  Â  Â  Â  Â  Â  manager_report_id: reportId,
Â  Â  Â  Â  Â  Â  product_id: productId,
Â  Â  Â  Â  Â  Â  custom_plan_assignment_id: assignment.id,
Â  Â  Â  Â  Â  Â  ...localChanges[productId]
Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  console.log('Guardando reporte de producto:', reportData);
Â  Â  Â  Â  Â  const result = await upsertProductProgressReport(reportData);
Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  if (result.error) {
Â  Â  Â  Â  Â  Â  console.error('Error guardando producto', productId, ':', result.error);
Â  Â  Â  Â  Â  Â  saveErrors.push({ productId, error: result.error });
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.log('Producto guardado exitosamente:', productId);
Â  Â  Â  Â  Â  Â  saveResults.push({ productId, data: result.data });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error('Error guardando producto', productId, ':', error);
Â  Â  Â  Â  Â  saveErrors.push({ productId, error });
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  console.log('Resultados del guardado:', { saveResults, saveErrors });
Â  Â  Â Â 
Â  Â  Â  if (saveErrors.length > 0) {
Â  Â  Â  Â  console.error('Errores al guardar:', saveErrors);
Â  Â  Â  Â Â 
Â  Â  Â  Â  if (saveResults.length === 0) {
Â  Â  Â  Â  Â  throw new Error(`No se pudo guardar ningÃºn reporte. ${saveErrors.map(e => `Producto ${e.productId}: ${e.error?.message || 'Error desconocido'}`).join(', ')}`);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  toast({
Â  Â  Â  Â  Â  Â  title: "Guardado parcial",
Â  Â  Â  Â  Â  Â  description: `Se guardaron ${saveResults.length} reportes, pero ${saveErrors.length} fallaron. Intenta guardar nuevamente.`,
Â  Â  Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  if (saveResults.length > 0) {
Â  Â  Â  Â  setLocalChanges(prev => {
Â  Â  Â  Â  Â  const newChanges = { ...prev };
Â  Â  Â  Â  Â  saveResults.forEach(({ productId }) => {
Â  Â  Â  Â  Â  Â  delete newChanges[productId];
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  return newChanges;
Â  Â  Â  Â  });
Â  Â  Â  Â Â 
Â  Â  Â  Â  const updateResult = await updateManagerReport(reportId, {Â 
Â  Â  Â  Â  Â  status: 'draft',
Â  Â  Â  Â  Â  updated_at: new Date().toISOString()
Â  Â  Â  Â  });

Â  Â  Â  Â  if (updateResult.error) {
Â  Â  Â  Â  Â  console.error('Error actualizando informe principal:', updateResult.error);
Â  Â  Â  Â  }
Â  Â  Â  Â Â 
Â  Â  Â  Â  if (saveErrors.length === 0) {
Â  Â  Â  Â  Â  toast({
Â  Â  Â  Â  Â  Â  title: "Ã‰xito",
Â  Â  Â  Â  Â  Â  description: "Borrador guardado correctamente",
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  Â  Â Â 
Â  Â  Â  Â  await loadData();
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error saving draft:', error);
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Error",
Â  Â  Â  Â  description: error instanceof Error ? error.message : "No se pudo guardar el borrador",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  setSaving(false);
Â  Â  }
Â  };

Â  const submitReport = async () => {
Â  Â  if (isReadOnly) return;
Â  Â Â 
Â  Â  setSubmitting(true);
Â  Â  try {
Â  Â  Â  console.log('Enviando informe...');
Â  Â  Â Â 
Â  Â  Â  if (Object.keys(localChanges).length > 0) {
Â  Â  Â  Â  console.log('Guardando cambios pendientes antes de enviar...');
Â  Â  Â  Â  await saveDraft();
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  const updateResult = await updateManagerReport(reportId, {Â 
Â  Â  Â  Â  status: 'submitted',
Â  Â  Â  Â  submitted_date: new Date().toISOString(),
Â  Â  Â  Â  updated_at: new Date().toISOString()
Â  Â  Â  });

Â  Â  Â  if (updateResult.error) {
Â  Â  Â  Â  throw updateResult.error;
Â  Â  Â  }

Â  Â  Â  console.log('Informe enviado exitosamente');

Â  Â  Â  toast({
Â  Â  Â  Â  title: "Ã‰xito",
Â  Â  Â  Â  description: overallProgress >= 70Â 
Â  Â  Â  Â  Â  ? "Informe enviado correctamente. Se ha notificado a los administradores y coordinadores."
Â  Â  Â  Â  Â  : "Informe enviado. Como el progreso es menor al 70%, se requerirÃ¡ un plan de mejora.",
Â  Â  Â  Â  variant: overallProgress >= 70 ? "default" : "destructive"
Â  Â  Â  });

Â  Â  Â  onSave();
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error submitting report:', error);
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Error",
Â  Â  Â  Â  description: "No se pudo enviar el informe",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  setSubmitting(false);
Â  Â  }
Â  };

Â  const organizeAssignments = () => {
Â  Â  const organized: any = {};
Â  Â Â 
Â  Â  assignments.forEach(assignment => {
Â  Â  Â  const product = assignment.product;
Â  Â  Â  if (!product) return;
Â  Â  Â Â 
Â  Â  Â  const action = product.action;
Â  Â  Â  const axis = action?.strategic_axis;
Â  Â  Â Â 
Â  Â  Â  if (!axis) return;
Â  Â  Â Â 
Â  Â  Â  if (!organized[axis.id]) {
Â  Â  Â  Â  organized[axis.id] = {
Â  Â  Â  Â  Â  ...axis,
Â  Â  Â  Â  Â  actions: {}
Â  Â  Â  Â  };
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  if (!organized[axis.id].actions[action.id]) {
Â  Â  Â  Â  organized[axis.id].actions[action.id] = {
Â  Â  Â  Â  Â  ...action,
Â  Â  Â  Â  Â  products: []
Â  Â  Â  Â  };
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  organized[axis.id].actions[action.id].products.push({
Â  Â  Â  Â  ...assignment,
Â  Â  Â  Â  progressReport: getProgressReport(product.id, assignment.id)
Â  Â  Â  });
Â  Â  });
Â  Â Â 
Â  Â  return Object.values(organized);
Â  };

Â  const getStatusBadge = (status: string) => {
Â  Â  switch (status) {
Â  Â  Â  case 'draft':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <Badge variant="secondary">
Â  Â  Â  Â  Â  Â  <Clock className="w-3 h-3 mr-1" />
Â  Â  Â  Â  Â  Â  Borrador
Â  Â  Â  Â  Â  </Badge>
Â  Â  Â  Â  );
Â  Â  Â  case 'submitted':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <Badge variant="default">
Â  Â  Â  Â  Â  Â  <Send className="w-3 h-3 mr-1" />
Â  Â  Â  Â  Â  Â  Enviado
Â  Â  Â  Â  Â  </Badge>
Â  Â  Â  Â  );
Â  Â  Â  case 'reviewed':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <Badge variant="default" className="bg-green-600">
Â  Â  Â  Â  Â  Â  <CheckCircle className="w-3 h-3 mr-1" />
Â  Â  Â  Â  Â  Â  Revisado
Â  Â  Â  Â  Â  </Badge>
Â  Â  Â  Â  );
Â  Â  Â  default:
Â  Â  Â  Â  return <Badge variant="outline">Sin estado</Badge>;
Â  Â  }
Â  };

Â  if (loading) {
Â  Â  return <div className="flex justify-center p-8">Cargando formulario de informe...</div>;
Â  }

Â  const organizedData = organizeAssignments();
Â  const canEdit = !isReadOnly && reportStatus === 'draft';
Â  const hasUnsavedChanges = Object.keys(localChanges).length > 0;
Â  const requiresImprovementPlan = overallProgress < 70;

Â  return (
Â  Â  <div className="space-y-6">
Â  Â  Â  {/* Header del informe */}
Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <h2 className="text-xl font-bold">
Â  Â  Â  Â  Â  Â  {isReadOnly ? 'Vista de Informe de Progreso' : 'Mi Informe de Progreso'}
Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  <div className="flex items-center gap-4 mt-2">
Â  Â  Â  Â  Â  Â  {getStatusBadge(reportStatus)}
Â  Â  Â  Â  Â  Â  <span className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  {assignments.length} indicadores
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  {hasUnsavedChanges && canEdit && (
Â  Â  Â  Â  Â  Â  Â  <Badge variant="outline" className="text-yellow-600 border-yellow-600">
Â  Â  Â  Â  Â  Â  Â  Â  <Edit3 className="w-3 h-3 mr-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Cambios sin guardar
Â  Â  Â  Â  Â  Â  Â  </Badge>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="flex gap-2">
Â  Â  Â  Â  Â  {canEdit && (
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  <ButtonÂ 
Â  Â  Â  Â  Â  Â  Â  Â  onClick={saveDraft}Â 
Â  Â  Â  Â  Â  Â  Â  Â  variant="outline"Â 
Â  Â  Â  Â  Â  Â  Â  Â  disabled={saving}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {saving ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full animate-spin mr-2"></div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Guardando...
Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Save className="h-4 w-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Guardar Borrador
Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  <ButtonÂ 
Â  Â  Â  Â  Â  Â  Â  Â  onClick={submitReport}Â 
Â  Â  Â  Â  Â  Â  Â  Â  disabled={submitting}
Â  Â  Â  Â  Â  Â  Â  Â  className={requiresImprovementPlan ? "bg-yellow-600 hover:bg-yellow-700" : ""}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {submitting ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Enviando...
Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Send className="h-4 w-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Enviar Informe
Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  {!canEdit && (
Â  Â  Â  Â  Â  Â  <Button onClick={onSave} variant="outline">
Â  Â  Â  Â  Â  Â  Â  <CheckCircle className="h-4 w-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Cerrar
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Resumen general del progreso */}
Â  Â  Â  <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
Â  Â  Â  Â  <CardContent className="pt-6">
Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  <div className="text-3xl font-bold text-blue-600 mb-2">{overallProgress}%</div>
Â  Â  Â  Â  Â  Â  Â  <div className="text-sm text-gray-600">Progreso General</div>
Â  Â  Â  Â  Â  Â  Â  <Progress value={overallProgress} className="mt-2" />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  <div className="text-3xl font-bold text-gray-700 mb-2">{progressReports.length + Object.keys(localChanges).length}</div>
Â  Â  Â  Â  Â  Â  Â  <div className="text-sm text-gray-600">Indicadores con Progreso</div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  <div className="text-3xl font-bold text-gray-700 mb-2">{assignments.length}</div>
Â  Â  Â  Â  Â  Â  Â  <div className="text-sm text-gray-600">Total de Indicadores</div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {requiresImprovementPlan && (
Â  Â  Â  Â  Â  Â  <Alert className="mt-4 border-yellow-400 bg-yellow-50">
Â  Â  Â  Â  Â  Â  Â  <AlertTriangle className="h-4 w-4 text-yellow-600" />
Â  Â  Â  Â  Â  Â  Â  <AlertDescription className="text-yellow-800">
Â  Â  Â  Â  Â  Â  Â  Â  <strong>AtenciÃ³n:</strong> El progreso general es menor al 70%. Al enviar este informe se requerirÃ¡ crear un plan de mejora para la prÃ³xima vigencia.
Â  Â  Â  Â  Â  Â  Â  </AlertDescription>
Â  Â  Â  Â  Â  Â  </Alert>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  {hasUnsavedChanges && canEdit && (
Â  Â  Â  Â  Â  Â  <Alert className="mt-4 border-blue-400 bg-blue-50">
Â  Â  Â  Â  Â  Â  Â  <Edit3 className="h-4 w-4 text-blue-600" />
Â  Â  Â  Â  Â  Â  Â  <AlertDescription className="text-blue-800">
Â  Â  Â  Â  Â  Â  Â  Â  Tienes cambios sin guardar. Haz clic en "Guardar Borrador" para guardar tus cambios en la base de datos.
Â  Â  Â  Â  Â  Â  Â  </AlertDescription>
Â  Â  Â  Â  Â  Â  </Alert>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </CardContent>
Â  Â  Â  </Card>

Â  Â  Â  {organizedData.length === 0 ? (
Â  Â  Â  Â  <Alert>
Â  Â  Â  Â  Â  <FileText className="h-4 w-4" />
Â  Â  Â  Â  Â  <AlertDescription>
Â  Â  Â  Â  Â  Â  No hay productos asignados en el plan de trabajo para reportar.
Â  Â  Â  Â  Â  </AlertDescription>
Â  Â  Â  Â  </Alert>
Â  Â  Â  ) : (
Â  Â  Â  Â  <div className="space-y-6">
Â  Â  Â  Â  Â  {organizedData.map((axis: any) => (
Â  Â  Â  Â  Â  Â  <Card key={axis.id}>
Â  Â  Â  Â  Â  Â  Â  <CardHeader>
Â  Â  Â  Â  Â  Â  Â  Â  <CardTitle className="text-lg text-blue-800">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {axis.code} - {axis.name}
Â  Â  Â  Â  Â  Â  Â  Â  </CardTitle>
Â  Â  Â  Â  Â  Â  Â  </CardHeader>
Â  Â  Â  Â  Â  Â  Â  <CardContent>
Â  Â  Â  Â  Â  Â  Â  Â  {Object.values(axis.actions).map((action: any) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={action.id} className="mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="font-medium text-gray-800 mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {action.code} {action.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Tabla de indicadores */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="border rounded-lg overflow-hidden">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Table>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHeader>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableRow className="bg-gray-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead className="font-medium">Indicador</TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead className="font-medium w-32">Horas</TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead className="font-medium w-32">Progreso (%)</TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead className="font-medium w-40">Progreso Visual</TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead className="font-medium">Observaciones</TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead className="font-medium w-80">Evidencias</TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableHeader>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableBody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {action.products.map((assignment: any) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const product = assignment.product;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const progressReport = assignment.progressReport;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableRow key={assignment.id} className="hover:bg-gray-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="font-medium">{product.name}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Badge variant="outline">{assignment.assigned_hours}h</Badge>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {canEdit ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  max="100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={progressReport.progress_percentage || 0}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const newPercentage = Math.min(100, Math.max(0, parseInt(e.target.value) || 0));
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  updateLocalChanges(product.id, assignment.id, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  progress_percentage: newPercentage
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-20"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium">{progressReport.progress_percentage || 0}%</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ProgressÂ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={progressReport.progress_percentage || 0}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex-1"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-xs text-gray-500 w-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {progressReport.progress_percentage || 0}%
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {canEdit ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Textarea
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={progressReport.observations || ''}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  updateLocalChanges(product.id, assignment.id, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  observations: e.target.value
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Observaciones sobre el progreso..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="min-h-[60px] resize-none"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-sm text-gray-600 max-w-xs">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {progressReport.observations || 'Sin observaciones'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <EvidenceUploader
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  productId={product.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  reportId={reportId}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  currentFiles={progressReport.evidence_files || []}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  currentFileNames={progressReport.evidence_file_names || []}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onFilesChange={(files, fileNames) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  updateLocalChanges(product.id, assignment.id, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  evidence_files: files,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  evidence_file_names: fileNames
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={!canEdit}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableBody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Table>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </CardContent>
Â  Â  Â  Â  Â  Â  </Card>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
}
